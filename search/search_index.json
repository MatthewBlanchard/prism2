{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PRISM A comprehensive traditional roguelike engine for L\u00d6VE . \"Traditional\" roguelike? Prism is geared towards classic roguelike games like NetHack or Brogue. These are turn-based games set in randomly generated grid levels. Getting started","title":"Home"},{"location":"#prism","text":"A comprehensive traditional roguelike engine for L\u00d6VE .","title":"PRISM"},{"location":"#traditional-roguelike","text":"Prism is geared towards classic roguelike games like NetHack or Brogue. These are turn-based games set in randomly generated grid levels.","title":"\"Traditional\" roguelike?"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"architecture-primer/","text":"Prism's Architecture: A Primer This is an overview of how a game made with Prism fits together. Actors Actors are the who and whats of a game: the player, monsters, items, chests, and whatever other kinds of entities your game might have are actors. Actors have components, blobs of data that contain an actor's state and drive the logic. Components Components are the data that make up actors. The health of a monster, a poison effect, and the player's sight range are all held in components attached to the actor. Components allow actors to take actions. Actions Actions are taken by actors to perform state changes in the level. Attacking, moving, or casting a fireball are examples of actions. They require actors to have combinations of components before being performed. Actions might cause systems to Systems Systems perform logic based on events. You might have a system that ticks down an actor's poison component when their turn ends, or checks if a monster is floating over a pit after they've been moved. Systems operate on an entire level. The Level The level holds and maintains the state of all actors. It also keeps track of turns. You would use the level to perform actions, move actors, or check what cell is at a specific location. Cells Cells are your walls, floors, water, lava: what your actors stand on.","title":"Prism's Architecture: A Primer"},{"location":"architecture-primer/#prisms-architecture-a-primer","text":"This is an overview of how a game made with Prism fits together.","title":"Prism's Architecture: A Primer"},{"location":"architecture-primer/#actors","text":"Actors are the who and whats of a game: the player, monsters, items, chests, and whatever other kinds of entities your game might have are actors. Actors have components, blobs of data that contain an actor's state and drive the logic.","title":"Actors"},{"location":"architecture-primer/#components","text":"Components are the data that make up actors. The health of a monster, a poison effect, and the player's sight range are all held in components attached to the actor. Components allow actors to take actions.","title":"Components"},{"location":"architecture-primer/#actions","text":"Actions are taken by actors to perform state changes in the level. Attacking, moving, or casting a fireball are examples of actions. They require actors to have combinations of components before being performed. Actions might cause systems to","title":"Actions"},{"location":"architecture-primer/#systems","text":"Systems perform logic based on events. You might have a system that ticks down an actor's poison component when their turn ends, or checks if a monster is floating over a pit after they've been moved. Systems operate on an entire level.","title":"Systems"},{"location":"architecture-primer/#the-level","text":"The level holds and maintains the state of all actors. It also keeps track of turns. You would use the level to perform actions, move actors, or check what cell is at a specific location.","title":"The Level"},{"location":"architecture-primer/#cells","text":"Cells are your walls, floors, water, lava: what your actors stand on.","title":"Cells"},{"location":"making-a-roguelike-part1/","text":"Part 1","title":"Part 01"},{"location":"making-a-roguelike-part1/#part-1","text":"","title":"Part 1"}]}